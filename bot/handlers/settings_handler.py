import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
import re
from bot.utils.logging import logger
from bot.db.crud import create_db
from bot.db.crud import create_log_tables
from bot.db.crud import get_user_by_id
from config.config import BOT_TOKEN
from bot.db.crud import (
    add_user,
    update_user,
    log_water,
    log_food,
    log_exercise,
    get_daily_summary,
)
from bot.utils.calculation import (
    calculate_exercise_calories,
    calculate_calorie_goal,
    calculate_water_goal,
    get_food_info,
    get_weather,
)
from bot.utils.calculation import EXTRA_WATER_ACTIVITY

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)


class ProfileSetup(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()
    calorie_goal = State()
    water_goal = State()
    set_custom_calorie_goal = State()
    set_custom_water_goal = State()


class FoodLogState(StatesGroup):
    waiting_for_food_name = State()
    waiting_for_food_amount = State()


@router.message(F.text == "/set_profile")
async def set_profile_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(ProfileSetup.weight)
    logger.info(f"User {message.from_user.id} requested /set_profile")


@router.message(ProfileSetup.weight)
async def set_weight(message: types.Message, state: FSMContext):
    try:
        weight = int(message.text)
        await state.update_data(weight=weight)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
        await state.set_state(ProfileSetup.height)
    except ValueError:
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–µ—Å–∞.")


@router.message(ProfileSetup.height)
async def set_height(message: types.Message, state: FSMContext):
    try:
        height = int(message.text)
        await state.update_data(height=height)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(ProfileSetup.age)
    except ValueError:
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–æ—Å—Ç–∞.")


@router.message(ProfileSetup.age)
async def set_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
        await state.set_state(ProfileSetup.activity)
    except ValueError:
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.")


@router.message(ProfileSetup.activity)
async def set_activity(message: types.Message, state: FSMContext):
    try:
        activity = int(message.text)
        await state.update_data(activity=activity)
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? –ù–∞–ø—Ä–∏–º–µ—Ä, –ü–æ—Ä—Ç—É.")
        await state.set_state(ProfileSetup.city)
    except ValueError:
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")


@router.message(ProfileSetup.city)
async def set_city(message: types.Message, state: FSMContext):
    try:
        city = message.text
        get_weather(city)
        data = await state.get_data()

        weight = data["weight"]
        height = data["height"]
        age = data["age"]
        activity = data["activity"]

        waiting_message = await message.answer(
            "üîÑ –°–æ—Å—Ç–∞–≤–ª—è—é –ø–ª–∞–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )
        await asyncio.sleep(2)

        calorie_goal = calculate_calorie_goal(
            weight=weight, height=height, age=age, activity_minutes=activity
        )
        water_goal = calculate_water_goal(
            weight=weight, activity_minutes=activity, city=city
        )

        await state.update_data(
            city=city,
            weight=weight,
            height=height,
            age=age,
            activity=activity,
            calorie_goal=calorie_goal,
            water_goal=water_goal,
        )

        keyboard_calorie_goal = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data="calorie_goal_yes")],
                [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="calorie_goal_no")],
            ]
        )
        await waiting_message.edit_text(
            f"üå±‚òÄÔ∏è –Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–µ–π —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º: {round(calorie_goal)} –∫–∫–∞–ª.\n\n"
            f"‚ùì –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —ç—Ç–æ–π —Ü–µ–ª—å—é?",
            reply_markup=keyboard_calorie_goal,
        )
    except ValueError:
        await waiting_message.edit_text(
            "üö´ –ù–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@router.message(ProfileSetup.set_custom_calorie_goal, F.text.regexp(r"^\d+$"))
async def set_custom_calorie_goal(message: types.Message, state: FSMContext):
    custom_calorie_goal = int(message.text)
    await state.update_data(calorie_goal=custom_calorie_goal)
    await message.answer("‚úÖ –¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    await ask_water_goal(message, state)


@router.message(ProfileSetup.set_custom_water_goal, F.text.regexp(r"^\d+$"))
async def set_custom_water_goal(message: types.Message, state: FSMContext):
    custom_water_goal = int(message.text)
    await state.update_data(water_goal=custom_water_goal)
    await message.answer("‚úÖ –¶–µ–ª—å –ø–æ –≤–æ–¥–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    await finalize_profile(message, state)


@router.callback_query(lambda c: c.data and c.data.startswith("calorie_goal_"))
async def handle_calorie_goal_confirmation(
    callback_query: types.CallbackQuery, state: FSMContext
):
    if callback_query.data == "calorie_goal_yes":
        await ask_water_goal(callback_query.message, state)
    else:
        await callback_query.message.edit_text(
            "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000):"
        )
        await state.set_state(ProfileSetup.set_custom_calorie_goal)


async def ask_water_goal(message: types.Message, state: FSMContext):
    data = await state.get_data()
    water_goal = data["water_goal"]

    keyboard_water_goal = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="water_goal_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="water_goal_no")],
        ]
    )
    await message.answer(
        f"üíß –Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∞–º –≤—ã–ø–∏–≤–∞—Ç—å {round(water_goal)} –º–ª –≤–æ–¥—ã –≤ –¥–µ–Ω—å.\n\n"
        f"‚ùì –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —ç—Ç–æ–π —Ü–µ–ª—å—é?",
        reply_markup=keyboard_water_goal,
    )


@router.callback_query(lambda c: c.data and c.data.startswith("water_goal_"))
async def handle_water_goal_confirmation(
    callback_query: types.CallbackQuery, state: FSMContext
):
    if callback_query.data == "water_goal_yes":
        await finalize_profile(callback_query.message, state)
    else:
        await callback_query.message.edit_text(
            "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ (–≤ –º–ª):"
        )
        await state.set_state(ProfileSetup.set_custom_water_goal)


async def finalize_profile(message: types.Message, state: FSMContext):
    data = await state.get_data()
    existing_user = get_user_by_id(message.from_user.id)
    weight = data["weight"]
    height = data["height"]
    age = data["age"]
    activity = data["activity"]
    calorie_goal = data["calorie_goal"]
    city = data["city"]
    water_goal = data["water_goal"]

    if existing_user:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data="update_profile_yes")],
                [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="update_profile_no")],
            ]
        )
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?", reply_markup=keyboard
        )

        await state.update_data(
            city=city,
            weight=weight,
            height=height,
            age=age,
            activity=activity,
            calorie_goal=calorie_goal,
            water_goal=water_goal,
        )
    else:
        add_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            weight=weight,
            height=height,
            age=age,
            activity=activity,
            city=city,
            water_goal=water_goal,
            calorie_goal=calorie_goal,
        )
        await message.answer(
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n–¶–µ–ª—å –≤–æ–¥—ã: {round(water_goal)} –º–ª\n–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {round(calorie_goal)} –∫–∫–∞–ª."
        )
        await state.clear()


@router.callback_query(lambda c: c.data and c.data.startswith("update_profile_"))
async def handle_update_confirmation(
    callback_query: types.CallbackQuery, state: FSMContext
):
    if callback_query.data == "update_profile_yes":
        data = await state.get_data()
        update_user(
            user_id=callback_query.from_user.id,
            weight=data["weight"],
            height=data["height"],
            age=data["age"],
            activity=data["activity"],
            city=data["city"],
            water_goal=data["water_goal"],
            calorie_goal=data["calorie_goal"],
        )
        await callback_query.message.edit_text(
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n–¶–µ–ª—å –≤–æ–¥—ã: {round(data['water_goal'])} –º–ª\n–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {round(data['calorie_goal'])} –∫–∫–∞–ª."
        )
        await state.clear()
    elif callback_query.data == "update_profile_no":
        await callback_query.message.edit_text("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        await state.clear()


@router.message(Command("log_water"))
async def log_water_handler(message: types.Message):
    logger.info(f"User {message.from_user.id} requested /log_water")
    try:
        match = re.search(r"[-+]?\d*[\.,]?\d+", message.text)
        if match:
            amount = match.group().replace(",", ".")
            log_water(message.from_user.id, amount)

            user_summary = get_daily_summary(message.from_user.id)
            water_left = (
                user_summary.get("water_goal", 0)
                - user_summary.get("total_water_ml", 0)
                - user_summary.get("extra_water", 0)
            )
            message_log = f"üíß –ó–∞–ø–∏—Å–∞–Ω–æ {amount} –º–ª –≤–æ–¥—ã."
            if water_left <= 0.0:
                await message.answer(f"{message_log} –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –≤–æ–¥—ã!")
            else:
                await message.answer(
                    f"{message_log} –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å {round(water_left, 2)} –º–ª."
                )

            logger.debug(f"Logged {amount} of water for user {message.from_user.id}")
        else:
            logger.debug(f"Cannot log water amount for user {message.from_user.id}")
            await message.answer(
                "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: /log_water 500"
            )
    except Exception as e:
        await message.answer(
            f"–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        logger.error(f"Cannot log water: {e}")


@router.message(Command("log_food"))
async def log_food_handler(
    message: types.Message, command: CommandObject, state: FSMContext
):
    logger.info(f"User {message.from_user.id} requested /log_food")
    food_name = command.args.strip() if command.args else None

    if not food_name:
        await message.answer("‚ùì –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω")
        return

    waiting_message = await message.answer(
        "üîÑ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )
    food_info = get_food_info(food_name)

    if not food_info:
        await waiting_message.edit_text(
            "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    calories_per_100g = food_info.get("calories", 0.0)
    await state.update_data(food_name=food_name, calories_per_100g=calories_per_100g)

    await waiting_message.edit_text(
        f"üçå {food_name.capitalize()} ‚Äî {round(calories_per_100g)} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n"
        "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
    )
    await state.set_state(FoodLogState.waiting_for_food_amount)


@router.message(FoodLogState.waiting_for_food_amount, F.text.regexp(r"^\d+$"))
async def process_food_amount(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        food_name = data["food_name"]
        calories_per_100g = data["calories_per_100g"]

        grams = int(message.text)
        calories = (calories_per_100g * grams) / 100
        log_food(message.from_user.id, food_name, calories_per_100g, grams)

        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {round(calories, 1)} –∫–∫–∞–ª –∏–∑ {grams} –≥ {food_name.capitalize()}.\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º —Ä–∞—Ü–∏–æ–Ω–æ–º! ü•ó"
        )
        await state.clear()
    except ValueError:
        await message.answer(
            "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–µ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."
        )


@router.message(FoodLogState.waiting_for_food_amount)
async def handle_invalid_food_amount(message: types.Message, state: FSMContext):
    await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–µ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞.")
    await state.set_state()


@router.message(Command("log_workout"))
async def log_workout_handler(message: types.Message):
    logger.info(f"User {message.from_user.id} requested /log_workout")
    args = message.text.removeprefix("/log_workout").strip().split()
    if len(args) < 2:
        await message.answer(
            "‚ùì –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "/log_workout –±–µ–≥ 30"
        )
        return

    exercise_type, duration_minutes = args[0], args[1]
    try:
        duration_minutes = int(duration_minutes)

        calories_burned = calculate_exercise_calories(exercise_type, duration_minutes)
        extra_water = (duration_minutes / 30) * EXTRA_WATER_ACTIVITY

        log_exercise(
            message.from_user.id, exercise_type, duration_minutes, calories_burned
        )
        log_water(message.from_user.id, -extra_water)

        await message.answer(
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è {exercise_type.capitalize()}\n"
            f"- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω\n"
            f"- –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {calories_burned:.1f} –∫–∫–∞–ª\n"
            f"- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–µ–π—Ç–µ: {extra_water:.1f} –º–ª –≤–æ–¥—ã üíß"
        )
    except ValueError:
        await message.answer(
            "üö´ –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: /log_workout –ø–ª–∞–≤–∞–Ω–∏–µ 45"
        )
        logger.debug(f"Cannot log workout amount for user {message.from_user.id}")
    except Exception as e:
        await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"Cannot log workout: {e}")


@router.message(Command("check_progress"))
async def check_progress_handler(message: types.Message):
    try:
        logger.info(f"User {message.from_user.id} requested /check_progress")
        user_summary = get_daily_summary(message.from_user.id)

        total_calories_consumed = user_summary.get("total_calories_consumed", 0)
        total_calories_burned = user_summary.get("total_calories_burned", 0)
        total_water_ml = user_summary.get("total_water_ml", 0)
        water_delta = (
            user_summary.get("water_goal", 0)
            - total_water_ml
            - user_summary.get("extra_water", 0)
        )

        await message.answer(
            "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
            f"–í–æ–¥–∞:\n- –í—ã–ø–∏—Ç–æ: {total_water_ml:.1f} –º–ª.\n"
            f"- –û—Å—Ç–∞–ª–æ—Å—å: {water_delta if water_delta > 0 else 0:.1f} –º–ª.\n\n"
            f"–ö–∞–ª–æ—Ä–∏–∏:\n- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {round(total_calories_consumed)} –∫–∫–∞–ª –∏–∑ "
            f"{round(user_summary.get('calorie_goal', 0))} –∫–∫–∞–ª.\n"
            f"- –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {round(total_calories_burned)} –∫–∫–∞–ª.\n"
            f"- –ë–∞–ª–∞–Ω—Å: {round(total_calories_consumed - total_calories_burned)} –∫–∫–∞–ª.\n"
        )
    except Exception as e:
        await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"Cannot log workout: {e}")


async def set_bot_commands():
    commands = [
        types.BotCommand(command="/set_profile", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand(
            command="/log_water", description="–ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã"
        ),
        types.BotCommand(command="/log_food", description="–î–æ–±–∞–≤–∏—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—É—é –µ–¥—É"),
        types.BotCommand(command="/log_workout", description="–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"),
        types.BotCommand(
            command="/check_progress", description="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å"
        ),
    ]
    await bot.set_my_commands(commands)


async def main():
    create_db()
    create_log_tables()
    logger.debug("Databases are configured.")

    dp.shutdown.register(on_shutdown)
    dp.startup.register(on_startup)

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

    await dp.start_polling(bot)


async def on_startup():
    await set_bot_commands()
    logger.info("Bot launched!")


async def on_shutdown():
    logger.info("Bot stopped!")
